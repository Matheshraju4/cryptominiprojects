
pragma solidity >=0.5.0 <0.9.0;

contract Auction{
    address payable public owner;
    uint public startblock;
    uint public endblock;
    string public ipfshash;

    enum State {Started,cancelled,running,Ended}
    State public Auctionstate;

    uint public highestbindingbid;

    address payable public highestbidder;
    mapping(address => uint )public bids;
    uint bidincrement;

    bool public ownerfinalized=false;

    constructor(){
        owner=payable(msg.sender);
        Auctionstate=state.running;

        startblock=block.number;
        endblock=startblock+3;

        ipfshash="";
        bidincrement=1000000000000000000;

    }
    modifier notowner(){
        require(msg.sender !=owner);
        _;
    }
    modifier onlyowner(){
        require(msg.sender == owner);
        _;
    }
    modifier afterstart(){
        require(block.number >= startblock);
        _;
    
    }
    modifier beforeend(){
        require(block.number <= endblock);
         _;
    }
    function min(uint a,uint b)pure internal returns(uint){
        if(a <= b){
            return a;
        
        }
        else {
            return b;

        }
    }
    function cancelauction() public beforeend onlyowner{
       
        Auctionstate=state.cancelled;

    
    }
    function placebid() public notowner beforeend afterstart returns(bool){
        require(Auctionstate==state.running);
        uint currentbid = bids[msg.sender] + msg.value;
        require(currentbid > highestbindingbid);
        bids[msg.sender]=currentbid;
        
        if (currentbid <= bids[highestbidder]){
            highestbindingbid = min(currentbid + bidincrement,bids[highestbidder]);
        }
        else{
            highestbindingbid = min(currentbid,bids[highestbidder]+bidincrement);
         highestbidder =payable(msg.sender);
         }
        return true;
    }
    
    }
    function finalizeAuction()public{
        require(Auctionstate == state.cancelled || block.number >endblock);

        require(msg.sender == owner || bids[msg.sender]>0);
        address payable recipient;
        uint value;

        if (Auctionstate == state.cancelled){
            recipient = payable(msg.sender);
            value = bids[msg.sender];
        }
        else{
            if(msg.sender == owner && ownerfinalized == false){
                recipient = owner;
                value = highestbindingbid;
                ownerfinalized == true;
            }
            else{
                if(msg.sender == highestbidder){
                    recipient=highestbidder;
                    value=bids[highestbidder]-highestbindingbid;
                }
                else{
                    recipient=payable(msg.sender);
                    value=bids[msg.sender];
                }
            }
        }
        bids[recipient]=0;
        recipient.transfer(value);
    }
}
